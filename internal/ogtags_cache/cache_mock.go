// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package ogtags_cache

import (
	"sync"
)

// Ensure, that OGCacheClientMock does implement OGCacheClient.
// If this is not the case, regenerate this file with moq.
var _ OGCacheClient = &OGCacheClientMock{}

// OGCacheClientMock is a mock implementation of OGCacheClient.
//
//	func TestSomethingThatUsesOGCacheClient(t *testing.T) {
//
//		// make and configure a mocked OGCacheClient
//		mockedOGCacheClient := &OGCacheClientMock{
//			GetFunc: func(url string) (string, error) {
//				panic("mock out the Get method")
//			},
//			SetFunc: func(url string, jsonByte []byte) error {
//				panic("mock out the Set method")
//			},
//		}
//
//		// use mockedOGCacheClient in code that requires OGCacheClient
//		// and then make assertions.
//
//	}
type OGCacheClientMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(url string) (string, error)

	// SetFunc mocks the Set method.
	SetFunc func(url string, jsonByte []byte) error

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// URL is the url argument value.
			URL string
		}
		// Set holds details about calls to the Set method.
		Set []struct {
			// URL is the url argument value.
			URL string
			// JsonByte is the jsonByte argument value.
			JsonByte []byte
		}
	}
	lockGet sync.RWMutex
	lockSet sync.RWMutex
}

// Get calls GetFunc.
func (mock *OGCacheClientMock) Get(url string) (string, error) {
	if mock.GetFunc == nil {
		panic("OGCacheClientMock.GetFunc: method is nil but OGCacheClient.Get was just called")
	}
	callInfo := struct {
		URL string
	}{
		URL: url,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(url)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedOGCacheClient.GetCalls())
func (mock *OGCacheClientMock) GetCalls() []struct {
	URL string
} {
	var calls []struct {
		URL string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// Set calls SetFunc.
func (mock *OGCacheClientMock) Set(url string, jsonByte []byte) error {
	if mock.SetFunc == nil {
		panic("OGCacheClientMock.SetFunc: method is nil but OGCacheClient.Set was just called")
	}
	callInfo := struct {
		URL      string
		JsonByte []byte
	}{
		URL:      url,
		JsonByte: jsonByte,
	}
	mock.lockSet.Lock()
	mock.calls.Set = append(mock.calls.Set, callInfo)
	mock.lockSet.Unlock()
	return mock.SetFunc(url, jsonByte)
}

// SetCalls gets all the calls that were made to Set.
// Check the length with:
//
//	len(mockedOGCacheClient.SetCalls())
func (mock *OGCacheClientMock) SetCalls() []struct {
	URL      string
	JsonByte []byte
} {
	var calls []struct {
		URL      string
		JsonByte []byte
	}
	mock.lockSet.RLock()
	calls = mock.calls.Set
	mock.lockSet.RUnlock()
	return calls
}
